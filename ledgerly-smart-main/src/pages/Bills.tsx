import { useState, useEffect, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogDescription } from "@/components/ui/dialog";
import { FileText, Plus, Search, Download, Edit, Eye, Calendar, Loader2, Trash2 } from "lucide-react";
import { supabase } from "@/lib/supabase";
import toast, { Toaster } from 'react-hot-toast';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { QRCodeSVG } from 'qrcode.react';

// Import the new InvoiceI component
import InvoiceI from "@/components/InvoiceI"; // Ensure this path is correct based on your project structure

// Helper function for status variant
const getStatusVariant = (status) => {
  switch (status) {
    case "paid":
      return "default";
    case "pending":
      return "secondary";
    case "overdue":
      return "destructive";
    case "draft":
    default: // Default case for any other status or undefined
      return "outline";
  }
};

// QR Code Component
const BillQRCode = ({ billId }) => {
  // Construct the URL where the bill can be viewed.
  // This assumes you have a public route like /bills/:id that displays a single bill.
  const billUrl = `${window.location.origin}/bills/${billId}`;
  return (
    <div className="p-2 rounded-md">
      <QRCodeSVG value={billUrl} size={70} level="H" />
    </div>
  );
};

// Template Components (Modified to include QR Code)
const TemplateA = ({ billData }) => (
  <div className="p-6 border rounded-lg shadow-sm bg-white text-gray-800 relative">
    <div className="absolute top-4 right-4">
      <BillQRCode billId={billData.id} />
    </div>
    <h2 className="text-2xl font-bold mb-4 text-center">Invoice (Template A)</h2>
    <div className="flex justify-between mb-4">
      <div>
        <p className="font-semibold">Bill Number: {billData.bill_number || 'N/A'}</p>
        <p>Issued Date: {new Date(billData.issue_date).toLocaleDateString()}</p>
        <p>Due Date: {new Date(billData.due_date).toLocaleDateString()}</p>
      </div>
    </div>
    <div className="border-t border-b py-4 mb-4">
      <p className="text-lg font-bold">Amount: ₹{billData.amount.toLocaleString()}</p>
      <p className="text-sm text-gray-600">{billData.items_count || 0} items</p>
    </div>
    <p className="text-sm text-gray-700">Thank you for your business!</p>
    <p className="text-xs text-gray-500 mt-4 text-center">Generated by Bill Management System</p>
  </div>
);

const TemplateB = ({ billData }) => (
  <div className="p-8 border-2 border-blue-500 rounded-xl shadow-lg bg-blue-50 text-blue-900 relative">
    <div className="absolute top-4 right-4">
      <BillQRCode billId={billData.id} />
    </div>
    <h2 className="text-3xl font-extrabold mb-6 text-center text-blue-700">Detailed Bill (Template B)</h2>
    <div className="grid grid-cols-2 gap-4 mb-6">
      <div>
        <p className="text-sm font-medium text-blue-600">Bill ID:</p>
        <p className="text-lg font-semibold">{billData.id}</p>
      </div>
      <div>
        <p className="text-sm font-medium text-blue-600">Bill Number:</p>
        <p className="text-lg font-semibold">{billData.bill_number || 'N/A'}</p>
      </div>
      <div>
        <p className="text-sm font-medium text-blue-600">Company:</p>
        <p className="text-lg font-semibold">{billData.companies?.company_name || 'N/A'}</p>
      </div>
      <div>
        <p className="text-sm font-medium text-blue-600">Type:</p>
        <p className="text-lg font-semibold capitalize">{billData.type}</p>
      </div>
    </div>
    <div className="border-t-2 border-b-2 border-blue-300 py-6 mb-6 text-center">
      <p className="text-xl font-bold text-blue-700">Total Amount:</p>
      <p className="text-4xl font-extrabold text-blue-800">₹{billData.amount.toLocaleString()}</p>
    </div>
    <div className="flex justify-between text-blue-800 text-md">
      <div>
        <p className="font-medium">Issue Date:</p>
        <p>{new Date(billData.issue_date).toLocaleDateString()}</p>
      </div>
      <div>
        <p className="font-medium">Due Date:</p>
        <p>{new Date(billData.due_date).toLocaleDateString()}</p>
      </div>
      <div>
        <p className="font-medium">Status:</p>
        <Badge variant={getStatusVariant(billData.status)} className="capitalize">{billData.status}</Badge>
      </div>
    </div>
    <p className="text-xs text-blue-600 mt-6 text-center">For any queries, please contact our support.</p>
  </div>
);

// ViewBillModal Component
const ViewBillModal = ({ isOpen, onClose, billData }) => {
  const [selectedTemplate, setSelectedTemplate] = useState(null as null | 'templateA' | 'templateB' | 'invoiceI');
  const [copyType, setCopyType] = useState<'original' | 'duplicate'>('original');
  const printRef = useRef(); // Ref for the content to be printed

  useEffect(() => {
    if (!isOpen) {
      setSelectedTemplate(null); // Reset selected template when modal closes
      setCopyType('original');
    }
  }, [isOpen]);

  const handleTemplateSelect = (templateType) => {
    if (!billData) return; // Ensure billData exists

    if (templateType === 'templateA') {
      setSelectedTemplate('templateA');
    } else if (templateType === 'templateB') {
      setSelectedTemplate('templateB');
    } else if (templateType === 'invoiceI') { // New template option for InvoiceI
      setCopyType('original');
      setSelectedTemplate('invoiceI');
    }
  };

  const handleDownloadPdf = async () => {
    if (!printRef.current || !billData) return;

    toast.loading('Generating PDF...', { id: 'pdf-toast' });

    try {
      // It's crucial that the selectedTemplateComponent is fully rendered before html2canvas captures it.
      // For complex templates, you might consider a small delay or ensuring all data is loaded.
      const canvas = await html2canvas(printRef.current, { scale: 2 }); // Scale for better resolution
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4'); // 'p' for portrait, 'mm' for millimeters, 'a4' for A4 size

      const imgWidth = 210; // A4 width in mm
      const pageHeight = 297; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;

      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save(`${billData.bill_number || 'bill'}-invoice.pdf`);
      toast.success('PDF generated successfully!', { id: 'pdf-toast' });
    } catch (error) {
      console.error("Error generating PDF:", error);
      toast.error('Failed to generate PDF.', { id: 'pdf-toast' });
    }
  };

  const handlePrint = () => {
    // Print only the content inside printRef using CSS to hide the rest
    if (!printRef.current) return;
    window.print();
  };

  const applyTempPrintClassAndPrint = (className) => {
    const body = document.body as HTMLBodyElement;
    body.classList.add(className);
    const cleanup = () => {
      body.classList.remove(className);
      window.removeEventListener('afterprint', cleanup as any);
    };
    window.addEventListener('afterprint', cleanup as any);
    // Ensure DOM paints with the class before invoking print
    setTimeout(() => {
      window.print();
    }, 50);
    setTimeout(cleanup, 1000);
  };

  const handlePrintOriginal = () => applyTempPrintClassAndPrint('print-only-original');
  const handlePrintDuplicate = () => applyTempPrintClassAndPrint('print-only-duplicate');
  const handlePrintSelected = () => {
    if (copyType === 'original') return handlePrintOriginal();
    if (copyType === 'duplicate') return handlePrintDuplicate();
  };

  const downloadElementAsPdf = async (element, filename) => {
    if (!element || !billData) return;
    toast.loading('Generating PDF...', { id: 'pdf-toast' });
    try {
      const canvas = await html2canvas(element, { scale: 2 });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 297;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      pdf.save(`${billData.bill_number || 'bill'}-${filename}.pdf`);
      toast.success('PDF generated successfully!', { id: 'pdf-toast' });
    } catch (error) {
      console.error('Error generating section PDF:', error);
      toast.error('Failed to generate PDF.', { id: 'pdf-toast' });
    }
  };

  const handleDownloadOriginalPdf = async () => {
    if (!printRef.current) return;
    const container = printRef.current as HTMLElement;
    const el = container.querySelector('#original-invoice') as HTMLElement | null;
    await downloadElementAsPdf(el, 'original');
  };

  const handleDownloadDuplicatePdf = async () => {
    if (!printRef.current) return;
    const container = printRef.current as HTMLElement;
    const el = container.querySelector('#duplicate-invoice') as HTMLElement | null;
    await downloadElementAsPdf(el, 'duplicate');
  };

  // Removed: Download Selected PDF (not needed)

  const renderInvoiceI = () => (
    <div className="space-y-6">
      {copyType === 'original' && (
        <div id="original-section">
          <div className="w-full flex justify-center mb-2">
            <span className="inline-block border border-gray-900 rounded px-3 py-0.5 text-[11px] font-bold uppercase tracking-wider bg-white">Original</span>
          </div>
          <div className="border border-gray-300 rounded p-1">
            <div id="original-invoice" className="page-section">
              <InvoiceI billData={billData} />
            </div>
          </div>
        </div>
      )}
      {copyType === 'duplicate' && (
        <div id="duplicate-section">
          <div className="w-full flex justify-center mb-2">
            <span className="inline-block border border-gray-900 rounded px-3 py-0.5 text-[11px] font-bold uppercase tracking-wider bg-white">Duplicate</span>
          </div>
          <div className="border border-gray-300 rounded p-1">
            <div id="duplicate-invoice" className="page-section">
              <InvoiceI billData={billData} />
            </div>
          </div>
        </div>
      )}
    </div>
  );

  const renderSelectedTemplate = () => {
    if (selectedTemplate === 'templateA') return <TemplateA billData={billData} />;
    if (selectedTemplate === 'templateB') return <TemplateB billData={billData} />;
    if (selectedTemplate === 'invoiceI') return renderInvoiceI();
    return null;
  };

  if (!isOpen || !billData) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-3xl max-h-[90vh] overflow-y-auto print:w-auto print:max-w-none print:h-auto print:max-h-none print:overflow-visible print:p-0 print:m-0">
        <DialogHeader>
          <DialogTitle>View Bill: {billData.bill_number || 'N/A'}</DialogTitle>
          <p className="text-sm text-muted-foreground">Select a template to view the bill.</p>
        </DialogHeader>
        <div className="grid grid-cols-3 gap-4 py-4"> {/* Changed to 3 columns for new template */}
           <Button onClick={() => handleTemplateSelect('invoiceI')}> {/* Button for InvoiceI */}
            Tax Invoice
          </Button>
          <Button onClick={() => handleTemplateSelect('templateA')}>
            E Invoice 
          </Button>
        </div>
        {selectedTemplate && (
          <div className="mt-4 p-4 border rounded-lg bg-gray-50 print:p-0 print:border-0 print:bg-white">
            {/* Print CSS */}
            <style>
              {`@page { size: A4; margin: 12mm; }
                @media print {
                  .page-break { page-break-after: always; }
                  body.print-only-original #duplicate-section { display: none !important; }
                  body.print-only-duplicate #original-section { display: none !important; }
                  body.print-only-original .page-break, body.print-only-duplicate .page-break { display: none !important; }
                }`}
            </style>
            {/* Copy selector for Invoice I */}
            {selectedTemplate === 'invoiceI' && (
              <div className="mb-3 flex flex-wrap items-center gap-2">
                <span className="text-sm">View:</span>
                <Button size="sm" variant={copyType === 'original' ? 'default' : 'secondary'} onClick={() => setCopyType('original')}>Original</Button>
                <Button size="sm" variant={copyType === 'duplicate' ? 'default' : 'secondary'} onClick={() => setCopyType('duplicate')}>Duplicate</Button>
              </div>
            )}
            <div id="print-area" ref={printRef} className="print:w-auto print:h-auto"> {/* This div will be converted to PDF and Printed */}
              {renderSelectedTemplate()}
            </div>
            <div className="mt-4 flex flex-wrap gap-2 justify-between items-center print:hidden">
              {selectedTemplate === 'invoiceI' ? (
                <>
                  <div className="flex items-center gap-2">
                    <span className="text-sm">Print:</span>
                    {copyType === 'original' && (
                      <Button size="sm" variant="secondary" onClick={handlePrintOriginal}>Print Original</Button>
                    )}
                    {copyType === 'duplicate' && (
                      <Button size="sm" variant="secondary" onClick={handlePrintDuplicate}>Print Duplicate</Button>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    {copyType === 'original' && (
                      <Button variant="outline" onClick={handleDownloadOriginalPdf}>
                        <Download className="mr-2 h-4 w-4" /> Download Original PDF
                      </Button>
                    )}
                    {copyType === 'duplicate' && (
                      <Button variant="outline" onClick={handleDownloadDuplicatePdf}>
                        <Download className="mr-2 h-4 w-4" /> Download Duplicate PDF
                      </Button>
                    )}
                    {/* Removed: Download Selected as PDF */}
                  </div>
                </>
              ) : (
                <Button onClick={handleDownloadPdf}>
                  <Download className="mr-2 h-4 w-4" /> Download Current View as PDF
                </Button>
              )}
            </div>
          </div>
        )}
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};


// EditBillModal Component
const EditBillModal = ({ isOpen, onClose, billData, onSave, companiesList, loadingCompaniesList }) => {
  const [editedBillNumber, setEditedBillNumber] = useState(billData?.bill_number || "");
  const [editedBillAmount, setEditedBillAmount] = useState(billData?.amount || "");
  const [editedBillStatus, setEditedBillStatus] = useState(billData?.status || "pending");
  const [editedBillType, setEditedBillType] = useState(billData?.type || "outgoing");
  const [editedCompanyId, setEditedCompanyId] = useState(billData?.company_id || "");
  const [editFormError, setEditFormError] = useState("");

  useEffect(() => {
    // Update state when billData prop changes (e.g., when a new bill is selected for editing)
    if (billData) {
      setEditedBillNumber(billData.bill_number || "");
      setEditedBillAmount(billData.amount);
      setEditedBillStatus(billData.status);
      setEditedBillType(billData.type);
      setEditedCompanyId(billData.company_id);
    }
  }, [billData]);

  const handleSave = () => {
    setEditFormError(""); // Clear previous errors

    if (!editedCompanyId || !editedBillAmount || !editedBillStatus || !editedBillType) {
      setEditFormError("All fields are required.");
      toast.error("All fields are required to update the bill.");
      return;
    }

    const amountValue = parseFloat(editedBillAmount);
    if (isNaN(amountValue) || amountValue <= 0) {
      setEditFormError("Please enter a valid amount.");
      toast.error("Please enter a valid amount for the bill.");
      return;
    }

    // Call the onSave prop with the updated bill data
    onSave({
      ...billData, // Keep existing bill data
      bill_number: editedBillNumber,
      amount: amountValue,
      status: editedBillStatus,
      type: editedBillType,
      company_id: editedCompanyId,
    });
    onClose(); // Close the modal after saving
  };

  if (!isOpen || !billData) return null; // Don't render if not open or no billData

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Edit Bill: {billData.bill_number || 'N/A'}</DialogTitle>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          {editFormError && (
            <div className="text-red-500 text-sm mb-2">{editFormError}</div>
          )}

          <div className="grid gap-2">
            <label htmlFor="editCompany" className="text-sm font-medium">Company</label>
            <Select value={editedCompanyId} onValueChange={setEditedCompanyId} disabled={loadingCompaniesList}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder={loadingCompaniesList ? "Loading companies..." : "Select a company"} />
              </SelectTrigger>
              <SelectContent>
                {loadingCompaniesList ? (
                  <SelectItem value="loading" disabled>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin inline" /> Loading...
                  </SelectItem>
                ) : companiesList.length === 0 ? (
                  <SelectItem value="no-companies" disabled>No companies available</SelectItem>
                ) : (
                  companiesList.map((company) => (
                    <SelectItem key={company.id} value={company.id}>
                      {company.company_name}
                    </SelectItem>
                  ))
                )}
              </SelectContent>
            </Select>
          </div>

          <div className="grid gap-2">
            <label htmlFor="editBillNumber" className="text-sm font-medium">Bill Number</label>
            <Input
              id="editBillNumber"
              type="text"
              placeholder="e.g., INV-2023-001"
              value={editedBillNumber}
              onChange={(e) => setEditedBillNumber(e.target.value)}
            />
          </div>

          <div className="grid gap-2">
            <label htmlFor="editAmount" className="text-sm font-medium">Amount</label>
            <Input
              id="editAmount"
              type="number"
              placeholder="e.g., 15000"
              value={editedBillAmount}
              onChange={(e) => setEditedBillAmount(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <label htmlFor="editStatus" className="text-sm font-medium">Status</label>
            <Select value={editedBillStatus} onValueChange={setEditedBillStatus}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="pending">Pending</SelectItem>
                <SelectItem value="paid">Paid</SelectItem>
                <SelectItem value="overdue">Overdue</SelectItem>
                <SelectItem value="draft">Draft</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="grid gap-2">
            <label htmlFor="editType" className="text-sm font-medium">Type</label>
            <Select value={editedBillType} onValueChange={setEditedBillType}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="outgoing">Outgoing</SelectItem>
                <SelectItem value="incoming">Incoming</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <div className="flex justify-end gap-2">
          <Button variant="outline" onClick={onClose}>Cancel</Button>
          <Button onClick={handleSave} disabled={loadingCompaniesList}>Save Changes</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};


const Bills = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("");
  const [isCreateBillModalOpen, setIsCreateBillModalOpen] = useState(false);
  const [isViewBillModalOpen, setIsViewBillModalOpen] = useState(false);
  const [billToView, setBillToView] = useState(null);

  // States for new bill form fields
  const [newBillNumber, setNewBillNumber] = useState("");
  const [newBillAmount, setNewBillAmount] = useState("");
  const [newBillStatus, setNewBillStatus] = useState("pending");
  const [newBillType, setNewBillType] = useState("outgoing");
  const [selectedCompanyId, setSelectedCompanyId] = useState("");
  const [companiesList, setCompaniesList] = useState([]);
  const [loadingCompaniesList, setLoadingCompaniesList] = useState(true);
  const [formError, setFormError] = useState("");

  // States for edit bill modal
  const [isEditBillModalOpen, setIsEditBillModalOpen] = useState(false);
  const [billToEdit, setBillToEdit] = useState(null);

  // State for delete confirmation modal
  const [isDeleteConfirmModalOpen, setIsDeleteConfirmModalOpen] = useState(false);
  const [billToDeleteId, setBillToDeleteId] = useState(null);

  // Supabase specific states
  const [supabaseBills, setSupabaseBills] = useState([]);
  const [loadingBills, setLoadingBills] = useState(true);

  // Fetch companies from Supabase for the dropdown
  useEffect(() => {
    const fetchCompanies = async () => {
      setLoadingCompaniesList(true);
      const { data, error } = await supabase
        .from("companies")
        .select("id, company_name");
      if (error) {
        console.error("Error fetching companies:", error);
        toast.error("Failed to load companies for dropdown.");
      } else {
        setCompaniesList(data);
      }
      setLoadingCompaniesList(false);
    };
    fetchCompanies();
  }, []);

  // Fetch bills from Supabase (only active ones)
  const fetchBills = async () => {
    setLoadingBills(true);
    const { data, error } = await supabase
      .from("bills")
      .select(`
        *,
        companies (company_name)
      `)
      .eq('is_active', true); // Only fetch active bills
    if (error) {
      console.error("Error fetching bills:", error);
      toast.error("Failed to fetch bills.");
    } else {
      setSupabaseBills(data);
    }
    setLoadingBills(false);
  };

  // Effect to fetch bills on component mount
  useEffect(() => {
    fetchBills();
  }, []);


  const filteredBills = supabaseBills.filter((bill) => {
    const companyName = bill.companies?.company_name || "";
    const matchesSearch =
      (bill.bill_number?.toLowerCase() || "").includes(searchTerm.toLowerCase()) ||
      companyName.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus =
      filterStatus === "all" || !filterStatus || bill.status === filterStatus;
    return matchesSearch && matchesStatus;
  });

  const handleCreateBill = async () => {
    setFormError(""); // Clear previous form errors

    // Basic form validation
    if (!selectedCompanyId || !newBillAmount || !newBillStatus || !newBillType) {
      setFormError("All fields are required.");
      toast.error("All fields are required to create a bill.");
      return;
    }

    const amountValue = parseFloat(newBillAmount);
    if (isNaN(amountValue) || amountValue <= 0) {
      setFormError("Please enter a valid amount.");
      toast.error("Please enter a valid amount for the bill.");
      return;
    }

    try {
      const { data, error } = await supabase.from("bills").insert([
        {
          company_id: selectedCompanyId,
          amount: amountValue,
          status: newBillStatus,
          type: newBillType,
          issue_date: new Date().toISOString().split('T')[0], // Current date
          due_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now
          items_count: 1, // Default to 1, can be made dynamic later
          bill_number: newBillNumber || `BILL-${Date.now()}`, // Generate if not provided
          is_active: true, // Set to true by default for new bills
        },
      ]).select(); // Use .select() to get the inserted data back

      if (error) throw error;

      console.log("New bill created:", data);
      setIsCreateBillModalOpen(false); // Close modal
      // Reset form fields
      setNewBillNumber("");
      setNewBillAmount("");
      setNewBillStatus("pending");
      setNewBillType("outgoing");
      setSelectedCompanyId("");
      setFormError("");
      toast.success("Bill created successfully!");
      fetchBills(); // Refresh the list to show the new bill
    } catch (error) {
      console.error("Error creating bill:", error.message);
      toast.error(`Failed to create bill: ${error.message}`);
    }
  };

  const handleOpenViewModal = (bill) => {
    setBillToView(bill);
    setIsViewBillModalOpen(true);
  };

  const handleCloseViewModal = () => {
    setIsViewBillModalOpen(false);
    setBillToView(null);
  };

  const handleOpenEditModal = (bill) => {
    setBillToEdit(bill);
    setIsEditBillModalOpen(true);
  };

  const handleCloseEditModal = () => {
    setIsEditBillModalOpen(false);
    setBillToEdit(null);
  };

  const handleEditBill = async (updatedBill) => {
    try {
      const { data, error } = await supabase
        .from("bills")
        .update({
          company_id: updatedBill.company_id,
          amount: updatedBill.amount,
          status: updatedBill.status,
          type: updatedBill.type,
          bill_number: updatedBill.bill_number,
          // issue_date and due_date are not being edited in this modal, so they remain as is.
        })
        .eq("id", updatedBill.id) // Identify the row to update by its ID
        .select(); // Get the updated data back

      if (error) throw error;

      console.log("Bill updated:", data);
      toast.success("Bill updated successfully!");
      fetchBills(); // Refresh the list to show updated data
    } catch (error) {
      console.error("Error updating bill:", error.message);
      toast.error(`Failed to update bill: ${error.message}`);
    }
  };

  // Function to open the delete confirmation modal
  const handleOpenDeleteConfirmModal = (billId) => {
    setBillToDeleteId(billId);
    setIsDeleteConfirmModalOpen(true);
  };

  // Function to close the delete confirmation modal
  const handleCloseDeleteConfirmModal = () => {
    setBillToDeleteId(null);
    setIsDeleteConfirmModalOpen(false);
  };

  // Function to perform the actual soft delete after confirmation
  const handleConfirmDelete = async () => {
    if (!billToDeleteId) {
      console.error("No bill ID to delete.");
      toast.error("Error: No bill selected for deletion.");
      return;
    }
    try {
      const { error } = await supabase
        .from("bills")
        .update({ is_active: false }) // Soft delete by setting is_active to false
        .eq("id", billToDeleteId); // Target the specific bill

      if (error) throw error;

      toast.success("Bill deleted successfully!");
      fetchBills(); // Refresh the list to remove the deleted bill
      handleCloseDeleteConfirmModal(); // Close the confirmation modal
    } catch (error) {
      console.error("Error deleting bill:", error.message);
      toast.error(`Failed to delete bill: ${error.message}`);
    }
  };


  // Calculate summary statistics
  const totalRevenue = supabaseBills
    .filter(bill => bill.status === 'paid' && bill.type === 'incoming')
    .reduce((sum, bill) => sum + bill.amount, 0);

  const pendingPayments = supabaseBills
    .filter(bill => bill.status === 'pending' && bill.type === 'incoming')
    .reduce((sum, bill) => sum + bill.amount, 0);

  const overdueAmount = supabaseBills
    .filter(bill => bill.status === 'overdue' && bill.type === 'incoming')
    .reduce((sum, bill) => sum + bill.amount, 0);


  return (
    <div className="space-y-6 p-6">
      <Toaster position="top-right" /> {/* Toast notifications */}

      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Bill Management</h1>
          <p className="text-muted-foreground">
            Manage incoming and outgoing bills with comprehensive tracking.
          </p>
        </div>

        {/* Create Bill Dialog (Modal) */}
        <Dialog open={isCreateBillModalOpen} onOpenChange={setIsCreateBillModalOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Create Bill
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Create New Bill</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              {formError && (
                <div className="text-red-500 text-sm mb-2">{formError}</div>
              )}

              <div className="grid gap-2">
                <label htmlFor="company" className="text-sm font-medium">Company</label>
                <Select value={selectedCompanyId} onValueChange={setSelectedCompanyId} disabled={loadingCompaniesList}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder={loadingCompaniesList ? "Loading companies..." : "Select a company"} />
                  </SelectTrigger>
                  <SelectContent>
                    {loadingCompaniesList ? (
                      <SelectItem value="loading" disabled>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin inline" /> Loading...
                      </SelectItem>
                    ) : companiesList.length === 0 ? (
                      <SelectItem value="no-companies" disabled>No companies available</SelectItem>
                    ) : (
                      companiesList.map((company) => (
                        <SelectItem key={company.id} value={company.id}>
                          {company.company_name}
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
              </div>

              <div className="grid gap-2">
                <label htmlFor="billNumber" className="text-sm font-medium">Bill Number (Optional)</label>
                <Input
                  id="billNumber"
                  type="text"
                  placeholder="e.g., INV-2023-001"
                  value={newBillNumber}
                  onChange={(e) => setNewBillNumber(e.target.value)}
                />
              </div>

              <div className="grid gap-2">
                <label htmlFor="amount" className="text-sm font-medium">Amount</label>
                <Input
                  id="amount"
                  type="number"
                  placeholder="e.g., 15000"
                  value={newBillAmount}
                  onChange={(e) => setNewBillAmount(e.target.value)}
                />
              </div>
              <div className="grid gap-2">
                <label htmlFor="status" className="text-sm font-medium">Status</label>
                <Select value={newBillStatus} onValueChange={setNewBillStatus}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pending">Pending</SelectItem>
                    <SelectItem value="paid">Paid</SelectItem>
                    <SelectItem value="overdue">Overdue</SelectItem>
                    <SelectItem value="draft">Draft</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid gap-2">
                <label htmlFor="type" className="text-sm font-medium">Type</label>
                <Select value={newBillType} onValueChange={setNewBillType}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="outgoing">Outgoing</SelectItem>
                    <SelectItem value="incoming">Incoming</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => {
                setIsCreateBillModalOpen(false);
                setFormError(""); // Clear error on cancel
                // Reset form fields on cancel
                setNewBillNumber("");
                setNewBillAmount("");
                setNewBillStatus("pending");
                setNewBillType("outgoing");
                setSelectedCompanyId("");
              }}>Cancel</Button>
              <Button onClick={handleCreateBill} disabled={loadingCompaniesList}>Add Bill</Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Filters Section */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search bills by number or company..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9"
          />
        </div>
        <Select value={filterStatus} onValueChange={setFilterStatus}>
          <SelectTrigger className="w-full sm:w-48">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Status</SelectItem>
            <SelectItem value="draft">Draft</SelectItem>
            <SelectItem value="pending">Pending</SelectItem>
            <SelectItem value="paid">Paid</SelectItem>
            <SelectItem value="overdue">Overdue</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Stats Cards Section */}
      <div className="grid gap-4 md:grid-cols-4">
        <Card>
          <CardContent className="p-4 flex flex-col items-center justify-center">
            <p className="text-2xl font-bold text-green-600">₹{totalRevenue.toLocaleString()}</p>
            <p className="text-sm text-muted-foreground">Total Revenue</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 flex flex-col items-center justify-center">
            <p className="text-2xl font-bold text-orange-500">₹{pendingPayments.toLocaleString()}</p>
            <p className="text-sm text-muted-foreground">Pending Payments</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 flex flex-col items-center justify-center">
            <p className="text-2xl font-bold text-red-600">₹{overdueAmount.toLocaleString()}</p>
            <p className="text-sm text-muted-foreground">Overdue Amount</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4 flex flex-col items-center justify-center">
            <p className="text-2xl font-bold">{supabaseBills.length}</p>
            <p className="text-sm text-muted-foreground">Total Bills</p>
          </CardContent>
        </Card>
      </div>

      {/* Bills Tabs Section */}
      <Tabs defaultValue="all" className="space-y-6">
        <TabsList>
          <TabsTrigger value="all">All Bills</TabsTrigger>
          <TabsTrigger value="outgoing">Outgoing</TabsTrigger>
          <TabsTrigger value="incoming">Incoming</TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="space-y-4">
          {loadingBills ? (
            <div className="flex justify-center items-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
              <span className="ml-2 text-muted-foreground">Loading bills...</span>
            </div>
          ) : (
            <BillsList
              bills={filteredBills}
              getStatusVariant={getStatusVariant}
              onViewClick={handleOpenViewModal}
              onEditClick={handleOpenEditModal}
              onDeleteClick={handleOpenDeleteConfirmModal} // Call the new handler for delete confirmation
            />
          )}
        </TabsContent>

        <TabsContent value="outgoing" className="space-y-4">
          {loadingBills ? (
            <div className="flex justify-center items-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
              <span className="ml-2 text-muted-foreground">Loading bills...</span>
            </div>
          ) : (
            <BillsList
              bills={filteredBills.filter((b) => b.type === "outgoing")}
              getStatusVariant={getStatusVariant}
              onViewClick={handleOpenViewModal}
              onEditClick={handleOpenEditModal}
              onDeleteClick={handleOpenDeleteConfirmModal}
            />
          )}
        </TabsContent>

        <TabsContent value="incoming" className="space-y-4">
          {loadingBills ? (
            <div className="flex justify-center items-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
              <span className="ml-2 text-muted-foreground">Loading bills...</span>
            </div>
          ) : (
            <BillsList
              bills={filteredBills.filter((b) => b.type === "incoming")}
              getStatusVariant={getStatusVariant}
              onViewClick={handleOpenViewModal}
              onEditClick={handleOpenEditModal}
              onDeleteClick={handleOpenDeleteConfirmModal}
            />
          )}
        </TabsContent>
      </Tabs>

      {/* View Bill Modal */}
      <ViewBillModal
        isOpen={isViewBillModalOpen}
        onClose={handleCloseViewModal}
        billData={billToView}
      />

      {/* Edit Bill Modal */}
      <EditBillModal
        isOpen={isEditBillModalOpen}
        onClose={handleCloseEditModal}
        billData={billToEdit}
        onSave={handleEditBill}
        companiesList={companiesList}
        loadingCompaniesList={loadingCompaniesList}
      />

      {/* Delete Confirmation Modal */}
      <Dialog open={isDeleteConfirmModalOpen} onOpenChange={setIsDeleteConfirmModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Are you absolutely sure?</DialogTitle>
            <DialogDescription>
              This action cannot be undone. This will mark the bill as inactive and it will no longer appear in your list.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={handleCloseDeleteConfirmModal}>Cancel</Button>
            <Button variant="destructive" onClick={handleConfirmDelete}>Delete</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

// BillsList Component (updated to trigger delete confirmation modal)
const BillsList = ({ bills, getStatusVariant, onViewClick, onEditClick, onDeleteClick }) => {
  return (
    <Card>
      <CardContent className="p-0">
        <div className="overflow-x-auto">
          {bills.length > 0 ? (
            <table className="w-full">
              <thead>
                <tr className="border-b bg-muted/50">
                  <th className="text-left p-4 font-medium text-muted-foreground">Bill Details</th>
                  <th className="text-left p-4 font-medium text-muted-foreground">Company</th>
                  <th className="text-left p-4 font-medium text-muted-foreground">Dates</th>
                  <th className="text-left p-4 font-medium text-muted-foreground">Amount</th>
                  <th className="text-left p-4 font-medium text-muted-foreground">Status</th>
                  <th className="text-left p-4 font-medium text-muted-foreground">Actions</th>
                </tr>
              </thead>
              <tbody>
                {bills.map((bill) => (
                  <tr key={bill.id} className="border-b last:border-0 hover:bg-muted/25">
                    <td className="p-4">
                      <div>
                        <div className="font-medium">{bill.bill_number || 'N/A'}</div>
                        <div className="text-sm text-muted-foreground">
                          {bill.items_count || 0} items • {bill.type === "outgoing" ? "Invoice" : "Receipt"}
                        </div>
                      </div>
                    </td>
                    <td className="p-4">
                      <div className="font-medium">{bill.companies?.company_name || 'N/A'}</div>
                    </td>
                    <td className="p-4">
                      <div className="text-sm">
                        <div className="flex items-center gap-1"><Calendar className="h-3 w-3 text-muted-foreground" /> Issued: {new Date(bill.issue_date).toLocaleDateString()}</div>
                        <div className="text-muted-foreground flex items-center gap-1"><Calendar className="h-3 w-3 text-muted-foreground" /> Due: {new Date(bill.due_date).toLocaleDateString()}</div>
                      </div>
                    </td>
                    <td className="p-4">
                      <div className="font-semibold text-foreground">₹{bill.amount.toLocaleString()}</div>
                    </td>
                    <td className="p-4">
                      <Badge variant={getStatusVariant(bill.status)} className="capitalize">
                        {bill.status}
                      </Badge>
                    </td>
                    <td className="p-4">
                      <div className="flex space-x-1">
                        <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => onEditClick(bill)}>
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8"
                          onClick={() => onViewClick(bill)}
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-8 w-8 text-red-500"
                          onClick={() => onDeleteClick(bill.id)} // Triggers the confirmation modal
                        >
                          <Trash2 />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <div className="flex flex-col items-center justify-center py-12 px-4 text-center">
              <FileText className="h-16 w-16 text-muted-foreground mb-4 opacity-70" />
              <h3 className="text-xl font-semibold text-foreground mb-2">No bills found</h3>
              <p className="text-muted-foreground max-w-md">
                No bills match your current filters. Try adjusting your search criteria or create a new bill.
              </p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default Bills;
